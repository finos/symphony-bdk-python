# coding: utf-8

"""
    Agent API

    This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to some subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://rest-api.symphony.com/docs/messagemlv2 - **Real Time Events**: The following events are returned when reading from a real time messages and events stream (\"datafeed\"). These events will be returned for datafeeds created with the v5 endpoints. To know more about the endpoints, refer to Create Messages/Events Stream and Read Messages/Events Stream. Unless otherwise specified, all events were added in 1.46. 

    The version of the OpenAPI document: 24.12.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from symphony.bdk.gen.agent_model.room_tag import RoomTag
from symphony.bdk.gen.agent_model.v2_base_message import V2BaseMessage
from typing import Optional, Set
from typing_extensions import Self

class RoomCreatedMessage(V2BaseMessage):
    """
    Generated when a room is created.
    """ # noqa: E501
    creation_date: Optional[StrictInt] = Field(default=None, alias="creationDate")
    name: Optional[StrictStr] = None
    keywords: Optional[List[RoomTag]] = None
    description: Optional[StrictStr] = None
    created_by_user_id: Optional[StrictInt] = Field(default=None, description="The Symphony userId of the user who created the room.", alias="createdByUserId")
    read_only: Optional[StrictBool] = Field(default=None, alias="readOnly")
    discoverable: Optional[StrictBool] = None
    public: Optional[StrictBool] = None
    members_can_invite: Optional[StrictBool] = Field(default=None, alias="membersCanInvite")
    copy_protected: Optional[StrictBool] = Field(default=None, alias="copyProtected")
    __properties: ClassVar[List[str]] = ["id", "timestamp", "v2messageType", "streamId", "creationDate", "name", "keywords", "description", "createdByUserId", "readOnly", "discoverable", "public", "membersCanInvite", "copyProtected"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoomCreatedMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in keywords (list)
        _items = []
        if self.keywords:
            for _item_keywords in self.keywords:
                if _item_keywords:
                    _items.append(_item_keywords.to_dict())
            _dict['keywords'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoomCreatedMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "timestamp": obj.get("timestamp"),
            "v2messageType": obj.get("v2messageType"),
            "streamId": obj.get("streamId"),
            "creationDate": obj.get("creationDate"),
            "name": obj.get("name"),
            "keywords": [RoomTag.from_dict(_item) for _item in obj["keywords"]] if obj.get("keywords") is not None else None,
            "description": obj.get("description"),
            "createdByUserId": obj.get("createdByUserId"),
            "readOnly": obj.get("readOnly"),
            "discoverable": obj.get("discoverable"),
            "public": obj.get("public"),
            "membersCanInvite": obj.get("membersCanInvite"),
            "copyProtected": obj.get("copyProtected")
        })
        return _obj


