# coding: utf-8

"""
    Agent API

    This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to some subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://rest-api.symphony.com/docs/messagemlv2 - **Real Time Events**: The following events are returned when reading from a real time messages and events stream (\"datafeed\"). These events will be returned for datafeeds created with the v5 endpoints. To know more about the endpoints, refer to Create Messages/Events Stream and Read Messages/Events Stream. Unless otherwise specified, all events were added in 1.46. 

    The version of the OpenAPI document: 24.12.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ShareArticle(BaseModel):
    """
    ShareArticle
    """ # noqa: E501
    article_id: Optional[StrictStr] = Field(default=None, description="An ID for this article that should be unique to the calling application.  Either an articleId or an articleUrl is required. ", alias="articleId")
    title: StrictStr = Field(description="The title of the article")
    sub_title: Optional[StrictStr] = Field(default=None, description="The subtitle of the article", alias="subTitle")
    message: Optional[StrictStr] = Field(default=None, description="The message text that can be send along with the shared article")
    publisher: StrictStr = Field(description="Publisher of the article")
    publish_date: Optional[StrictInt] = Field(default=None, description="Article publish date in unix timestamp", alias="publishDate")
    thumbnail_url: Optional[StrictStr] = Field(default=None, description="Url to the thumbnail image", alias="thumbnailUrl")
    author: StrictStr = Field(description="Author of the article")
    article_url: Optional[StrictStr] = Field(default=None, description="Url to the article", alias="articleUrl")
    summary: Optional[StrictStr] = Field(default=None, description="Preview summary of the article")
    app_id: StrictStr = Field(description="App ID of the calling application", alias="appId")
    app_name: Optional[StrictStr] = Field(default=None, description="App name of the calling application", alias="appName")
    app_icon_url: Optional[StrictStr] = Field(default=None, description="App icon url of the calling application", alias="appIconUrl")
    __properties: ClassVar[List[str]] = ["articleId", "title", "subTitle", "message", "publisher", "publishDate", "thumbnailUrl", "author", "articleUrl", "summary", "appId", "appName", "appIconUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShareArticle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShareArticle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "articleId": obj.get("articleId"),
            "title": obj.get("title"),
            "subTitle": obj.get("subTitle"),
            "message": obj.get("message"),
            "publisher": obj.get("publisher"),
            "publishDate": obj.get("publishDate"),
            "thumbnailUrl": obj.get("thumbnailUrl"),
            "author": obj.get("author"),
            "articleUrl": obj.get("articleUrl"),
            "summary": obj.get("summary"),
            "appId": obj.get("appId"),
            "appName": obj.get("appName"),
            "appIconUrl": obj.get("appIconUrl")
        })
        return _obj


