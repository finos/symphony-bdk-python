# coding: utf-8

"""
    Agent API

    This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to some subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://rest-api.symphony.com/docs/messagemlv2 - **Real Time Events**: The following events are returned when reading from a real time messages and events stream (\"datafeed\"). These events will be returned for datafeeds created with the v5 endpoints. To know more about the endpoints, refer to Create Messages/Events Stream and Read Messages/Events Stream. Unless otherwise specified, all events were added in 1.46. 

    The version of the OpenAPI document: 24.12.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class V1AuditTrailInitiatorResponse(BaseModel):
    """
    Audit Trail Initiator object response. The attributes may vary according to the action. There are different types of action and each action could have specific attributes. 
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="The audit trail action that has peformed")
    action_name: Optional[StrictStr] = Field(default=None, description="The audit trail action name that has peformed", alias="actionName")
    timestamp: Optional[StrictStr] = Field(default=None, description="The timestamp when the action has occurred")
    initiator_id: Optional[StrictStr] = Field(default=None, description="The user's id that has performed the action", alias="initiatorId")
    initiator_username: Optional[StrictStr] = Field(default=None, description="The username that has performed the action", alias="initiatorUsername")
    initiator_email_address: Optional[StrictStr] = Field(default=None, description="The user's e-mail address that has performed the action", alias="initiatorEmailAddress")
    __properties: ClassVar[List[str]] = ["action", "actionName", "timestamp", "initiatorId", "initiatorUsername", "initiatorEmailAddress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1AuditTrailInitiatorResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1AuditTrailInitiatorResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "actionName": obj.get("actionName"),
            "timestamp": obj.get("timestamp"),
            "initiatorId": obj.get("initiatorId"),
            "initiatorUsername": obj.get("initiatorUsername"),
            "initiatorEmailAddress": obj.get("initiatorEmailAddress")
        })
        return _obj


