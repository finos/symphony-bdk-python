# coding: utf-8

"""
    Pod API

    This document refers to Symphony API calls that do not need encryption or decryption of content.  - sessionToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have made no change to the system even if ome subset of the request would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. 

    The version of the OpenAPI document: 20.17.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from symphony.bdk.gen.pod_model.v2_member_user_detail import V2MemberUserDetail
from typing import Optional, Set
from typing_extensions import Self

class V2MemberInfo(BaseModel):
    """
    Detailed membership record.
    """ # noqa: E501
    user: Optional[V2MemberUserDetail] = None
    is_owner: Optional[StrictBool] = Field(default=None, description="true if this is an owner of the room", alias="isOwner")
    is_creator: Optional[StrictBool] = Field(default=None, description="true if this is the creator of the room", alias="isCreator")
    join_date: Optional[StrictInt] = Field(default=None, description="unix timestamp for join date", alias="joinDate")
    added_through_groups: Optional[List[StrictInt]] = Field(default=None, description="When the user has been added to the stream through a group (aka SDL), this array contains the group ID which the user belongs to. Since SBE 20.14.", alias="addedThroughGroups")
    __properties: ClassVar[List[str]] = ["user", "isOwner", "isCreator", "joinDate", "addedThroughGroups"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V2MemberInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V2MemberInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user": V2MemberUserDetail.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "isOwner": obj.get("isOwner"),
            "isCreator": obj.get("isCreator"),
            "joinDate": obj.get("joinDate"),
            "addedThroughGroups": obj.get("addedThroughGroups")
        })
        return _obj


